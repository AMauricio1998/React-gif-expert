{"version":3,"sources":["Components/AddCategory.js","Helpers/GetGifs.js","Components/GifGridItem.js","Components/GifGrid.js","Hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","catego","type","value","onChange","target","getGifs","categoria","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","imagenes","GifExpertApp","categorias","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACQ,sBAAMC,SAXO,SAACC,GAClBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAM,OAAMP,GAAN,mBAAqBO,OAC1CN,EAAc,MAMd,SACI,uBACIO,KAAK,OACLC,MAAUT,EACVU,SAlBU,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCLlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAOIA,EAAKC,OAPT,uBAOXC,EAPW,EAOXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAbvB,kBAiBZM,GAjBY,4CAAH,sDCAPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGjC,OACI,sBAAKc,UAAU,8CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHHO,EAAU,SAAC,GAAiB,IAAhBnB,EAAe,EAAfA,UAErB,ECHwB,SAACA,GAEzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAdAC,qBAAW,WAEPxB,EAASC,GACAwB,MAAM,SAAAC,GAECH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAK9B,CAACpB,IAEGqB,EDlB0BK,CAAa1B,GAAlC2B,EAAZ,EAAOpB,KAAea,EAAtB,EAAsBA,QAGtB,OACI,qCACI,oBAAIJ,UAAU,mCAAd,SAAmDhB,IACjDoB,GAAW,mBAAGJ,UAAU,mCAAb,wBAEb,qBAAKA,UAAU,YAAf,SAEYW,EAASlB,KAAK,SAAAC,GAAG,OACb,cAAC,EAAD,eAESA,GADCA,EAAIC,aEd7BiB,EAAe,WAExB,MAAoC1C,mBAAS,CAAC,gBAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAUA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBAEA,6BAEQ4C,EAAWpB,KAAK,SAAAT,GAAS,OACvB,cAAC,EAAD,CAEEA,UAAcA,GADNA,Y,MCtBhC8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.73b60639.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategorias }) => {\r\n\r\n    const [inputValue, setinputValue] = useState('');\r\n    const handleInputChange = (e) => {\r\n        setinputValue(e.target.value);\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if ( inputValue.trim().length > 2 ) {\r\n            setCategorias( catego => [ inputValue, ...catego]);\r\n            setinputValue('');\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n            <form onSubmit = { handleSubmit }>\r\n                <input \r\n                    type=\"text\"\r\n                    value = { inputValue }\r\n                    onChange={ handleInputChange }\r\n                /> \r\n            </form>\r\n    );\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategorias: PropTypes.func.isRequired \r\n}\r\n","\r\n\r\nexport const getGifs = async(categoria) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( categoria ) }&limit=10&api_key=YRLXd79mz3RzRWa9L1C447X0OV5E237V`;\r\n    const resp = await fetch( url );\r\n    //Sin desestructurar la data(data.data)\r\n    // const data = await resp.json();\r\n    //Desestructurada\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    \r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( {title, url} ) => {\r\n\r\n    // console.log({ id, title, url });\r\n    return (\r\n        <div className=\"card animate__animated animate__backInRight\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","//Coleccion de gifs\r\nimport React from 'react'\r\nimport { useFetchGifs } from '../Hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({categoria}) => {\r\n\r\n    const {data:imagenes, loading} = useFetchGifs(categoria);\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__jello\">{ categoria }</h3>\r\n            { loading && <p className=\"animate__animated animate__jello\">Loading...</p> }\r\n            \r\n            <div className=\"cardGrid \">\r\n                     {\r\n                        imagenes.map( img => (\r\n                            <GifGridItem \r\n                                key={ img.id }  \r\n                                { ...img }\r\n                            />\r\n                        ))\r\n                    } \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../Helpers/GetGifs\";\r\n\r\n\r\nexport const useFetchGifs = (categoria) => {\r\n  \r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true,\r\n    });\r\n\r\n    useEffect( () => {\r\n\r\n        getGifs( categoria )\r\n                .then( imgs => {\r\n\r\n                        setstate({\r\n                            data: imgs,\r\n                            loading: false\r\n                        });\r\n\r\n                });\r\n\r\n    }, [categoria]);\r\n\r\n    return state;\r\n}\r\n","//RAFC\r\nimport React, { useState } from 'react'\r\nimport { AddCategory } from './Components/AddCategory';\r\nimport { GifGrid } from './Components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categorias, setCategorias] = useState(['Dragon ball']);\r\n\r\n    // const handleAdd = () => {\r\n    //     […]. El operador de propagación(spread) se puede usar para tomar una matriz(array) \r\n    //     existente y agregarle otro elemento mientras se conserva la matriz(array) original.\r\n    //     Obtenemos una las categorias y agragamos una nueva\r\n    //     setcategorias(['Naruto', ...categorias]);\r\n    //     setcategorias( catego => [...catego, 'Naruto']);\r\n    // };\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategorias = { setCategorias }/>\r\n            <hr/>\r\n\r\n            <ol>\r\n                {\r\n                    categorias.map( categoria => (\r\n                      <GifGrid \r\n                        key = { categoria }\r\n                        categoria = { categoria }\r\n                      />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}